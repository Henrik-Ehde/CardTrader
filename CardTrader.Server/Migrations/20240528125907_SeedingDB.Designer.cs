// <auto-generated />
using System;
using CardTrader.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CardTrader.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240528125907_SeedingDB")]
    partial class SeedingDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardTrader.Server.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Text = "Defeat All Units",
                            Title = "Superlaser Blast"
                        },
                        new
                        {
                            Id = 3,
                            Text = "Defeat a unit with 5 or less remaining HP",
                            Title = "Takedown"
                        },
                        new
                        {
                            Id = 4,
                            Text = "When Played: You may deal 3 damage to a space unit.",
                            Title = "Imperial Interceptor"
                        },
                        new
                        {
                            Id = 5,
                            Text = "Defeat a non-leader unit",
                            Title = "Vanquish"
                        },
                        new
                        {
                            Id = 9,
                            Text = "Action [-⌄]: Give an Experience token to another friendly unit",
                            Title = "Bail Organa"
                        },
                        new
                        {
                            Id = 10,
                            Text = "When played: You may attack with a unit. If it's a REBEL unit, it gets +2/+0 for this attack.",
                            Title = "Fleet Lieutenant"
                        },
                        new
                        {
                            Id = 11,
                            Text = "Other friendly REBEL units get +1/+1.",
                            Title = "General Dodonna"
                        },
                        new
                        {
                            Id = 12,
                            Text = "Give an Experience token to each of up to 3 REBEL units that attacked this phase",
                            Title = "Medal Ceremony"
                        },
                        new
                        {
                            Id = 14,
                            Text = "Return a non-leader unit to it's owner's hand",
                            Title = "Waylay"
                        },
                        new
                        {
                            Id = 17,
                            Text = "Saboteur",
                            Title = "Rebel Pathfinder"
                        },
                        new
                        {
                            Id = 18,
                            Text = "When Played: Deal Damage to an enemy unit equal to the number of units you control in it's arena",
                            Title = "Admiral Ackbar"
                        },
                        new
                        {
                            Id = 21,
                            Text = "When Played: Either ready a resource or exhaust a unit",
                            Title = "Leia Organa"
                        });
                });

            modelBuilder.Entity("CardTrader.Server.Models.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DatePosted")
                        .HasColumnType("date");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("Listings");

                    b.HasData(
                        new
                        {
                            Id = 27,
                            CardId = 14,
                            DatePosted = new DateOnly(2024, 5, 16),
                            Price = 2.00m,
                            Quantity = 8,
                            UserId = "305be290-c6c8-4088-abe0-3c7fd240575d"
                        },
                        new
                        {
                            Id = 30,
                            CardId = 3,
                            DatePosted = new DateOnly(2024, 5, 16),
                            Price = 7.50m,
                            Quantity = 1,
                            UserId = "d7826a1c-1652-48a1-8cfd-4a976248d03a"
                        },
                        new
                        {
                            Id = 32,
                            CardId = 2,
                            DatePosted = new DateOnly(2024, 5, 16),
                            Price = 200.00m,
                            Quantity = 2,
                            UserId = "d7826a1c-1652-48a1-8cfd-4a976248d03a"
                        },
                        new
                        {
                            Id = 33,
                            CardId = 9,
                            DatePosted = new DateOnly(2024, 5, 16),
                            Price = 15.00m,
                            Quantity = 2,
                            UserId = "d7826a1c-1652-48a1-8cfd-4a976248d03a"
                        },
                        new
                        {
                            Id = 36,
                            CardId = 12,
                            DatePosted = new DateOnly(2024, 5, 16),
                            Price = 5.00m,
                            Quantity = 6,
                            UserId = "c23bfbf6-54e2-407f-9a0e-a4e77c85e2aa"
                        },
                        new
                        {
                            Id = 39,
                            CardId = 11,
                            DatePosted = new DateOnly(2024, 5, 16),
                            Price = 25.00m,
                            Quantity = 5,
                            UserId = "c23bfbf6-54e2-407f-9a0e-a4e77c85e2aa"
                        },
                        new
                        {
                            Id = 40,
                            CardId = 17,
                            DatePosted = new DateOnly(2024, 5, 17),
                            Price = 7.00m,
                            Quantity = 1,
                            UserId = "10c3ab68-349d-46a2-beba-6d6a34d44e4a"
                        },
                        new
                        {
                            Id = 46,
                            CardId = 17,
                            DatePosted = new DateOnly(2024, 5, 17),
                            Price = 4.00m,
                            Quantity = 4,
                            UserId = "e7c585dc-4b37-4a75-8458-a09caf1df0a1"
                        },
                        new
                        {
                            Id = 47,
                            CardId = 17,
                            DatePosted = new DateOnly(2024, 5, 17),
                            Price = 6.00m,
                            Quantity = 1,
                            UserId = "13accbe2-0d08-405e-842f-562eb19eb9eb"
                        },
                        new
                        {
                            Id = 52,
                            CardId = 5,
                            DatePosted = new DateOnly(2024, 5, 17),
                            Price = 10.00m,
                            Quantity = 2,
                            UserId = "10c3ab68-349d-46a2-beba-6d6a34d44e4a"
                        },
                        new
                        {
                            Id = 53,
                            CardId = 21,
                            DatePosted = new DateOnly(2024, 5, 17),
                            Price = 30.00m,
                            Quantity = 3,
                            UserId = "10c3ab68-349d-46a2-beba-6d6a34d44e4a"
                        },
                        new
                        {
                            Id = 54,
                            CardId = 18,
                            DatePosted = new DateOnly(2024, 5, 24),
                            Price = 20.00m,
                            Quantity = 2,
                            UserId = "13accbe2-0d08-405e-842f-562eb19eb9eb"
                        },
                        new
                        {
                            Id = 55,
                            CardId = 18,
                            DatePosted = new DateOnly(2024, 5, 24),
                            Price = 25.00m,
                            Quantity = 4,
                            UserId = "d7826a1c-1652-48a1-8cfd-4a976248d03a"
                        },
                        new
                        {
                            Id = 56,
                            CardId = 18,
                            DatePosted = new DateOnly(2024, 5, 24),
                            Price = 18.50m,
                            Quantity = 1,
                            UserId = "e7c585dc-4b37-4a75-8458-a09caf1df0a1"
                        });
                });

            modelBuilder.Entity("CardTrader.Server.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CardTrader.Server.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SubTotal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CardTrader.Server.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "10c3ab68-349d-46a2-beba-6d6a34d44e4a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a190635c-513f-4be0-a51b-557b791bffa0",
                            Email = "PadawanHenrik@cardtrader.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PADAWANHENRIK@CARDTRADER.COM",
                            NormalizedUserName = "PADAWANHENRIK@CARDTRADER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG9kt1KLy1gURwa6qEn1qisTKYTo93B5IvWLGcusp7CpSa4KTG2/wTguhII0JUy2Sg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "KEL4AYSOLSTDBGCOV6V5KLW2ZMQ72ZQR",
                            TwoFactorEnabled = false,
                            UserName = "PadawanHenrik@cardtrader.com"
                        },
                        new
                        {
                            Id = "13accbe2-0d08-405e-842f-562eb19eb9eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86ab6172-af3d-489e-8d94-d77c100ad6c6",
                            Email = "MasterHenrik@cardtrader.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MASTERHENRIK@CARDTRADER.COM",
                            NormalizedUserName = "MASTERHENRIK@CARDTRADER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIF689lwByxC4CSBx+0QZJKDnyhP8P62vRs7jZC4S9BI6YhNwkHXlSzPRg/jQmziKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DJRTVSF73SKZE64XSWIXBWOZB2Y7VO5B",
                            TwoFactorEnabled = false,
                            UserName = "MasterHenrik@cardtrader.com"
                        },
                        new
                        {
                            Id = "305be290-c6c8-4088-abe0-3c7fd240575d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fff2c039-7c68-4d41-9981-ecd26294f1dc",
                            Email = "RebelHenrik@cardtrader.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REBELHENRIK@CARDTRADER.COM",
                            NormalizedUserName = "REBELHENRIK@CARDTRADER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFF4isjGcaE2wX18ISy835P2uLwdgTCWITlE94GtdKNZuAybaQNUS1MP3PF84Eae/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ORAX25XMADYUIDL3RKPIV6NFVQXL5FZH",
                            TwoFactorEnabled = false,
                            UserName = "RebelHenrik@cardtrader.com"
                        },
                        new
                        {
                            Id = "4d89b9ec-ab0d-4bcd-bd33-4c1c0227c139",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1195420-1986-46e9-b291-c9e9cee3acf7",
                            Email = "AdmiralHenrik@cardtrader.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIRALHENRIK@CARDTRADER.COM",
                            NormalizedUserName = "ADMIRALHENRIK@CARDTRADER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJfYRJgW3V9y3Vs8W4QOZMwz9vAXq+NHSZgmzF1AfFyilMqXqIJ47y6Z6OdC9nnDjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "WI4O73VRDTLSJRL5HWE45FFWA7FULWRC",
                            TwoFactorEnabled = false,
                            UserName = "AdmiralHenrik@cardtrader.com"
                        },
                        new
                        {
                            Id = "c23bfbf6-54e2-407f-9a0e-a4e77c85e2aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7e22164-9520-42d1-96c2-39f28892cc12",
                            Email = "DarthHenrik@cardtrader.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DARTHHENRIK@CARDTRADER.COM",
                            NormalizedUserName = "DARTHHENRIK@CARDTRADER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN/LgAUxWpsrjQ7k66r06IT+wHf6vUegODYWn1NYthFmO/y1n3VvAfVkZHBrUrX6fw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "Y22CH62G7SLLYCMAZPAWJOX6GTZHQMWR",
                            TwoFactorEnabled = false,
                            UserName = "DarthHenrik@cardtrader.com"
                        },
                        new
                        {
                            Id = "d7826a1c-1652-48a1-8cfd-4a976248d03a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9e15815-1c00-4553-84a9-9fb4fa560343",
                            Email = "StormTrooperHenrik@cardtrader.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STORMTROOPERHENRIK@CARDTRADER.COM",
                            NormalizedUserName = "STORMTROOPERHENRIK@CARDTRADER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDHKfCtcQwOxoXOc3G7FPQNWyvzJo5e5WUtT0KPNuAIuh8MA0hqs5lZZjf9Sn94Zig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ZOM3SDYSQGAAN34Q2PMJXF65ZRQC2LRQ",
                            TwoFactorEnabled = false,
                            UserName = "StormTrooperHenrik@cardtrader.com"
                        },
                        new
                        {
                            Id = "e7c585dc-4b37-4a75-8458-a09caf1df0a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae2b262e-4765-4022-8aaf-fb3bfbe5686c",
                            Email = "SithHenrik@cardtrader.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SITHHENRIK@CARDTRADER.COM",
                            NormalizedUserName = "SITHHENRIK@CARDTRADER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBzOpUxTQY+jYvRVtRGCtivyhTL34WWsSKf3dSO+HIJ5/X+/OkZwa867pNCW5EZSRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A2WFEBY3WQR37XP4ECCTPALD33L7FHVB",
                            TwoFactorEnabled = false,
                            UserName = "SithHenrik@cardtrader.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CardTrader.Server.Models.Listing", b =>
                {
                    b.HasOne("CardTrader.Server.Models.Card", "Card")
                        .WithMany("Listings")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardTrader.Server.Models.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardTrader.Server.Models.Order", b =>
                {
                    b.HasOne("CardTrader.Server.Models.User", "Buyer")
                        .WithMany("BuyOrders")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CardTrader.Server.Models.User", "Seller")
                        .WithMany("SellOrders")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("CardTrader.Server.Models.OrderItem", b =>
                {
                    b.HasOne("CardTrader.Server.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardTrader.Server.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CardTrader.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CardTrader.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardTrader.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CardTrader.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardTrader.Server.Models.Card", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("CardTrader.Server.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CardTrader.Server.Models.User", b =>
                {
                    b.Navigation("BuyOrders");

                    b.Navigation("Listings");

                    b.Navigation("SellOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
